<?xml version="1.0" ?>
<robot name="mr_robot_description" xmlns:xacro="http://www.ros.org/wiki/xacro" >

<xacro:property name="body_color" value="Gazebo/Yellow" />
<xacro:property name="wheel_color" value ="Gazebo/Black"/>
<xacro:property name="gpu_lidar" value ="Gazebo/Blue"/>
<xacro:property name="imu" value ="Gazebo/Black"/>
<xacro:property name="gps" value ="Gazebo/Black"/>
<xacro:property name="camera" value ="Gazebo/Blue"/>
<xacro:property name="depth_camera" value ="Gazebo/Red"/>

<!-- <gazebo>
  <plugin name="control" filename="libgazebo_ros_control.so"/>
</gazebo> -->

<gazebo reference="base_link"> <!--link named base_link specifies to which link the settings have to applied -->
  <material>${body_color}</material>
  <mu1>0.2</mu1>                  <!--resistance to the initial movement-->
  <mu2>0.2</mu2>                  <!-- dynamic friction-->
  <self_collide>true</self_collide>   <!-- Determines if the link can collide with other links in the same robot.-->
  <gravity>true</gravity>
</gazebo> 

<gazebo reference="Wheel_1_1">
  <material>${wheel_color}</material>
  <mu1>0.2</mu1>
  <mu2>0.2</mu2>
  <selfCollide>true</selfCollide>
</gazebo>

<gazebo reference="Wheel_r_1">
  <material>${wheel_color}</material>
  <mu1>0.2</mu1>
  <mu2>0.2</mu2>
  <selfCollide>true</selfCollide>
</gazebo>

<gazebo>
  <plugin filename="gz-sim-diff-drive-system" name="gz::sim::systems::DiffDrive">
    <left_joint>left_wheel_joint</left_joint>
    <right_joint>right_wheel_joint</right_joint>
    <wheel_separation>0.44</wheel_separation>
    <wheel_radius>0.0535</wheel_radius> 
    <!-- <max_linear_acceleration>0.033</max_linear_acceleration> computed from <max_linear_acceleration> in the original plugin -->
    <topic>cmd_vel</topic>

    <odom_topic>odom</odom_topic> 
    <frame_id>odom</frame_id>     
    <child_frame_id>base_footprint</child_frame_id>  <!--This is the robotâ€™s frame (its body) in odometry messages. If the robot moves forward 1 meter, base_footprint is now at (1, 0) in the odom frame.-->
    <odom_publisher_frequency>30</odom_publisher_frequency>
    <tf_topic>/tf</tf_topic>
  </plugin>
</gazebo>

<gazebo>
       <plugin filename="gz-sim-joint-state-publisher-system"
            name="gz::sim::systems::JointStatePublisher">
            <topic>joint_states</topic>
            <joint_name>left_wheel_joint</joint_name>
            <joint_name>right_wheel_joint</joint_name>
            <!-- <joint_name>base_link_joint</joint_name> -->
      </plugin>
</gazebo>

<gazebo reference="gpu_lidar">
  <sensor name='gpu_lidar' type='gpu_lidar'>"
    <pose relative_to='base_link'>0.001 0.006 0.18 0 0 0</pose>
    <topic>/laser/scan</topic>
    <gz_frame_id>laser_frame</gz_frame_id>
    <always_on>true</always_on>
    <visualize>true</visualize>
    <update_rate>10</update_rate>
    <lidar>
        <scan>
            <horizontal>
                <samples>360</samples>
                <resolution>1</resolution>
                <min_angle>-3.14</min_angle>
                <max_angle>3.14</max_angle>
            </horizontal>
            <vertical>
                <samples>1</samples>
                <resolution>0.01</resolution>
                <min_angle>0</min_angle>
                <max_angle>0</max_angle>
            </vertical>
        </scan>
        <range>
            <min>0.01</min>
            <max>10.0</max>
            <resolution>0.01</resolution>
        </range>
    </lidar>
  </sensor> 
</gazebo>


<gazebo reference="gpu_lidar">
  <material>${gpu_lidar}</material>
  <mu1>0.2</mu1>
  <mu2>0.2</mu2>
  <selfCollide>true</selfCollide>
</gazebo>

<gazebo reference="imu">
<plugin filename="gz-sim-imu-system" name="gz::sim::systems::Imu">
    <link name="imu_link">
      <sensor name="tb3_imu" type="imu">
        <always_on>true</always_on>
        <update_rate>200</update_rate>
        <topic>imu</topic>
                <imu>
              <angular_velocity>
                <x>
                  <noise type="gaussian">
                    <mean>0.0</mean>
                    <stddev>2e-4</stddev>
                  </noise>
                </x>
                <y>
                  <noise type="gaussian">
                    <mean>0.0</mean>
                    <stddev>2e-4</stddev>
                  </noise>
                </y>
                <z>
                  <noise type="gaussian">
                    <mean>0.0</mean>
                    <stddev>2e-4</stddev>
                  </noise>
                </z>
              </angular_velocity>
              <linear_acceleration>
                <x>
                  <noise type="gaussian">
                    <mean>0.0</mean>
                    <stddev>1.7e-2</stddev>
                  </noise>
                </x>
                <y>
                  <noise type="gaussian">
                    <mean>0.0</mean>
                    <stddev>1.7e-2</stddev>
                  </noise>
                </y>
                <z>
                  <noise type="gaussian">
                    <mean>0.0</mean>
                    <stddev>1.7e-2</stddev>
                  </noise>
                </z>
              </linear_acceleration>
            </imu>
      </sensor>
    </link>
  </plugin>
</gazebo>

<gazebo reference="imu">
  <material>imu</material>
  <mu1>0.2</mu1>
  <mu2>0.2</mu2>
  <self_collide>true</self_collide>
</gazebo>

<gazebo reference="camera">
  <plugin filename="gz-harmonic-camera-system" name="gz::harmonic::systems::CameraSystem"/>
  <sensor name="camera" type="camera">
  <always_on>true</always_on>
  <visualize>true</visualize>
  <update_rate>30</update_rate>
  <topic>camera/image_raw</topic>
  <gz_frame_id>camera_rgb_frame</gz_frame_id>
  <camera name="intel_realsense_r200">
    <camera_info_topic>camera/camera_info</camera_info_topic>
    <horizontal_fov>1.02974</horizontal_fov>
    <image>
      <width>1920</width>
      <height>1080</height>
      <format>R8G8B8</format>
    </image>
    <clip>
      <near>0.02</near>
      <far>300</far>
    </clip>
    <noise>
      <type>gaussian</type>
      <!-- Noise is sampled independently per pixel on each frame.
            That pixel's noise value is added to each of its color
            channels, which at that point lie in the range [0,1]. -->
      <mean>0.0</mean>
      <stddev>0.007</stddev>
    </noise>
  </camera>
</sensor>
</gazebo>

<gazebo reference="camera">
  <material>${camera}</material>
  <mu1>0.2</mu1>
  <mu2>0.2</mu2>
  <selfCollide>true</selfCollide>
</gazebo>


<gazebo reference="depth_camera">
  <plugin filename="gz-sim-depth-camera-system" name="gz::sim::systems::DepthCamera"/>
  <sensor type="depth_camera" name="depth_camera">
    <visualize>true</visualize>
    <always_on>true</always_on>
    <enable_metrics>true</enable_metrics>
    <update_rate>10</update_rate>
    <camera>
      <camera_info_topic>depth_camera/depth_camera_info</camera_info_topic>
      <horizontal_fov>1.3962634</horizontal_fov>
      <image>
        <width>640</width>
        <height>480</height>
        <format>R_FLOAT32</format>
      </image>
      <clip>
        <near>0.02</near>
        <far>300</far>
      </clip>
    </camera>
    <topic>depth_camera</topic>
    <gz_frame_id>depth_camera</gz_frame_id>
  </sensor>
</gazebo>

<gazebo reference="depth_camera">
  <material>${depth_camera}</material>
  <mu1>0.2</mu1>
  <mu2>0.2</mu2>
  <selfCollide>true</selfCollide>
</gazebo>

<!-- <gazebo reference="GPS__1">
  <material>${body_color}</material>
  <mu1>0.2</mu1>
  <mu2>0.2</mu2>
  <self_collide>true</self_collide>
</gazebo> -->

</robot>
